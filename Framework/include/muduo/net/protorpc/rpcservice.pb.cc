// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpcservice.proto

#include "rpcservice.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace muduo {
namespace net {
class ListRpcRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListRpcRequest> _instance;
} _ListRpcRequest_default_instance_;
class ListRpcResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListRpcResponse> _instance;
} _ListRpcResponse_default_instance_;
class GetServiceRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetServiceRequest> _instance;
} _GetServiceRequest_default_instance_;
class GetServiceResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetServiceResponse> _instance;
} _GetServiceResponse_default_instance_;
}  // namespace net
}  // namespace muduo
static void InitDefaultsListRpcRequest_rpcservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::muduo::net::_ListRpcRequest_default_instance_;
    new (ptr) ::muduo::net::ListRpcRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::muduo::net::ListRpcRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ListRpcRequest_rpcservice_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsListRpcRequest_rpcservice_2eproto}, {}};

static void InitDefaultsListRpcResponse_rpcservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::muduo::net::_ListRpcResponse_default_instance_;
    new (ptr) ::muduo::net::ListRpcResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::muduo::net::ListRpcResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ListRpcResponse_rpcservice_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsListRpcResponse_rpcservice_2eproto}, {}};

static void InitDefaultsGetServiceRequest_rpcservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::muduo::net::_GetServiceRequest_default_instance_;
    new (ptr) ::muduo::net::GetServiceRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::muduo::net::GetServiceRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetServiceRequest_rpcservice_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetServiceRequest_rpcservice_2eproto}, {}};

static void InitDefaultsGetServiceResponse_rpcservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::muduo::net::_GetServiceResponse_default_instance_;
    new (ptr) ::muduo::net::GetServiceResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::muduo::net::GetServiceResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetServiceResponse_rpcservice_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetServiceResponse_rpcservice_2eproto}, {}};

void InitDefaults_rpcservice_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_ListRpcRequest_rpcservice_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListRpcResponse_rpcservice_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetServiceRequest_rpcservice_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetServiceResponse_rpcservice_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_rpcservice_2eproto[4];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_rpcservice_2eproto = nullptr;
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors_rpcservice_2eproto[1];

const ::google::protobuf::uint32 TableStruct_rpcservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muduo::net::ListRpcRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::muduo::net::ListRpcRequest, service_name_),
  PROTOBUF_FIELD_OFFSET(::muduo::net::ListRpcRequest, list_method_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muduo::net::ListRpcResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::muduo::net::ListRpcResponse, error_),
  PROTOBUF_FIELD_OFFSET(::muduo::net::ListRpcResponse, service_name_),
  PROTOBUF_FIELD_OFFSET(::muduo::net::ListRpcResponse, method_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muduo::net::GetServiceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::muduo::net::GetServiceRequest, service_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muduo::net::GetServiceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::muduo::net::GetServiceResponse, error_),
  PROTOBUF_FIELD_OFFSET(::muduo::net::GetServiceResponse, proto_file_),
  PROTOBUF_FIELD_OFFSET(::muduo::net::GetServiceResponse, proto_file_name_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::muduo::net::ListRpcRequest)},
  { 7, -1, sizeof(::muduo::net::ListRpcResponse)},
  { 15, -1, sizeof(::muduo::net::GetServiceRequest)},
  { 21, -1, sizeof(::muduo::net::GetServiceResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::muduo::net::_ListRpcRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::muduo::net::_ListRpcResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::muduo::net::_GetServiceRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::muduo::net::_GetServiceResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_rpcservice_2eproto = {
  {}, AddDescriptors_rpcservice_2eproto, "rpcservice.proto", schemas,
  file_default_instances, TableStruct_rpcservice_2eproto::offsets,
  file_level_metadata_rpcservice_2eproto, 4, file_level_enum_descriptors_rpcservice_2eproto, file_level_service_descriptors_rpcservice_2eproto,
};

const char descriptor_table_protodef_rpcservice_2eproto[] =
  "\n\020rpcservice.proto\022\tmuduo.net\032\trpc.proto"
  "\";\n\016ListRpcRequest\022\024\n\014service_name\030\001 \001(\t"
  "\022\023\n\013list_method\030\002 \001(\010\"a\n\017ListRpcResponse"
  "\022#\n\005error\030\001 \001(\0162\024.muduo.net.ErrorCode\022\024\n"
  "\014service_name\030\002 \003(\t\022\023\n\013method_name\030\003 \003(\t"
  "\")\n\021GetServiceRequest\022\024\n\014service_name\030\001 "
  "\001(\t\"f\n\022GetServiceResponse\022#\n\005error\030\001 \001(\016"
  "2\024.muduo.net.ErrorCode\022\022\n\nproto_file\030\002 \003"
  "(\t\022\027\n\017proto_file_name\030\003 \003(\t2\231\001\n\nRpcServi"
  "ce\022@\n\007listRpc\022\031.muduo.net.ListRpcRequest"
  "\032\032.muduo.net.ListRpcResponse\022I\n\ngetServi"
  "ce\022\034.muduo.net.GetServiceRequest\032\035.muduo"
  ".net.GetServiceResponseB7\n\033com.chenshuo."
  "muduo.protorpcB\017RpcServiceProto\200\001\001\210\001\001\220\001\001"
  "b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_rpcservice_2eproto = {
  false, InitDefaults_rpcservice_2eproto, 
  descriptor_table_protodef_rpcservice_2eproto,
  "rpcservice.proto", &assign_descriptors_table_rpcservice_2eproto, 568,
};

void AddDescriptors_rpcservice_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_rpc_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_rpcservice_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_rpcservice_2eproto = []() { AddDescriptors_rpcservice_2eproto(); return true; }();
namespace muduo {
namespace net {

// ===================================================================

void ListRpcRequest::InitAsDefaultInstance() {
}
class ListRpcRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListRpcRequest::kServiceNameFieldNumber;
const int ListRpcRequest::kListMethodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListRpcRequest::ListRpcRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muduo.net.ListRpcRequest)
}
ListRpcRequest::ListRpcRequest(const ListRpcRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service_name().size() > 0) {
    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  list_method_ = from.list_method_;
  // @@protoc_insertion_point(copy_constructor:muduo.net.ListRpcRequest)
}

void ListRpcRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ListRpcRequest_rpcservice_2eproto.base);
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  list_method_ = false;
}

ListRpcRequest::~ListRpcRequest() {
  // @@protoc_insertion_point(destructor:muduo.net.ListRpcRequest)
  SharedDtor();
}

void ListRpcRequest::SharedDtor() {
  service_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListRpcRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListRpcRequest& ListRpcRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListRpcRequest_rpcservice_2eproto.base);
  return *internal_default_instance();
}


void ListRpcRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:muduo.net.ListRpcRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  list_method_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListRpcRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListRpcRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string service_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("muduo.net.ListRpcRequest.service_name");
        object = msg->mutable_service_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool list_method = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_list_method(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListRpcRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:muduo.net.ListRpcRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string service_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_name().data(), static_cast<int>(this->service_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "muduo.net.ListRpcRequest.service_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool list_method = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &list_method_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:muduo.net.ListRpcRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:muduo.net.ListRpcRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListRpcRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:muduo.net.ListRpcRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), static_cast<int>(this->service_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muduo.net.ListRpcRequest.service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->service_name(), output);
  }

  // bool list_method = 2;
  if (this->list_method() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->list_method(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:muduo.net.ListRpcRequest)
}

::google::protobuf::uint8* ListRpcRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:muduo.net.ListRpcRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), static_cast<int>(this->service_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muduo.net.ListRpcRequest.service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_name(), target);
  }

  // bool list_method = 2;
  if (this->list_method() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->list_method(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muduo.net.ListRpcRequest)
  return target;
}

size_t ListRpcRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muduo.net.ListRpcRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_name());
  }

  // bool list_method = 2;
  if (this->list_method() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListRpcRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:muduo.net.ListRpcRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListRpcRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ListRpcRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:muduo.net.ListRpcRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:muduo.net.ListRpcRequest)
    MergeFrom(*source);
  }
}

void ListRpcRequest::MergeFrom(const ListRpcRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muduo.net.ListRpcRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service_name().size() > 0) {

    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  if (from.list_method() != 0) {
    set_list_method(from.list_method());
  }
}

void ListRpcRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:muduo.net.ListRpcRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRpcRequest::CopyFrom(const ListRpcRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muduo.net.ListRpcRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRpcRequest::IsInitialized() const {
  return true;
}

void ListRpcRequest::Swap(ListRpcRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListRpcRequest::InternalSwap(ListRpcRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  service_name_.Swap(&other->service_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(list_method_, other->list_method_);
}

::google::protobuf::Metadata ListRpcRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_rpcservice_2eproto);
  return ::file_level_metadata_rpcservice_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListRpcResponse::InitAsDefaultInstance() {
}
class ListRpcResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListRpcResponse::kErrorFieldNumber;
const int ListRpcResponse::kServiceNameFieldNumber;
const int ListRpcResponse::kMethodNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListRpcResponse::ListRpcResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muduo.net.ListRpcResponse)
}
ListRpcResponse::ListRpcResponse(const ListRpcResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      service_name_(from.service_name_),
      method_name_(from.method_name_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:muduo.net.ListRpcResponse)
}

void ListRpcResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ListRpcResponse_rpcservice_2eproto.base);
  error_ = 0;
}

ListRpcResponse::~ListRpcResponse() {
  // @@protoc_insertion_point(destructor:muduo.net.ListRpcResponse)
  SharedDtor();
}

void ListRpcResponse::SharedDtor() {
}

void ListRpcResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListRpcResponse& ListRpcResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListRpcResponse_rpcservice_2eproto.base);
  return *internal_default_instance();
}


void ListRpcResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:muduo.net.ListRpcResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_name_.Clear();
  method_name_.Clear();
  error_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListRpcResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListRpcResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .muduo.net.ErrorCode error = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_error(static_cast<::muduo::net::ErrorCode>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated string service_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("muduo.net.ListRpcResponse.service_name");
          object = msg->add_service_name();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated string method_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("muduo.net.ListRpcResponse.method_name");
          object = msg->add_method_name();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListRpcResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:muduo.net.ListRpcResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .muduo.net.ErrorCode error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_error(static_cast< ::muduo::net::ErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string service_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_service_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_name(this->service_name_size() - 1).data(),
            static_cast<int>(this->service_name(this->service_name_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "muduo.net.ListRpcResponse.service_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string method_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_method_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->method_name(this->method_name_size() - 1).data(),
            static_cast<int>(this->method_name(this->method_name_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "muduo.net.ListRpcResponse.method_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:muduo.net.ListRpcResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:muduo.net.ListRpcResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListRpcResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:muduo.net.ListRpcResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .muduo.net.ErrorCode error = 1;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error(), output);
  }

  // repeated string service_name = 2;
  for (int i = 0, n = this->service_name_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name(i).data(), static_cast<int>(this->service_name(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muduo.net.ListRpcResponse.service_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->service_name(i), output);
  }

  // repeated string method_name = 3;
  for (int i = 0, n = this->method_name_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->method_name(i).data(), static_cast<int>(this->method_name(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muduo.net.ListRpcResponse.method_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->method_name(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:muduo.net.ListRpcResponse)
}

::google::protobuf::uint8* ListRpcResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:muduo.net.ListRpcResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .muduo.net.ErrorCode error = 1;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error(), target);
  }

  // repeated string service_name = 2;
  for (int i = 0, n = this->service_name_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name(i).data(), static_cast<int>(this->service_name(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muduo.net.ListRpcResponse.service_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->service_name(i), target);
  }

  // repeated string method_name = 3;
  for (int i = 0, n = this->method_name_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->method_name(i).data(), static_cast<int>(this->method_name(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muduo.net.ListRpcResponse.method_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->method_name(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muduo.net.ListRpcResponse)
  return target;
}

size_t ListRpcResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muduo.net.ListRpcResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string service_name = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->service_name_size());
  for (int i = 0, n = this->service_name_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->service_name(i));
  }

  // repeated string method_name = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->method_name_size());
  for (int i = 0, n = this->method_name_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->method_name(i));
  }

  // .muduo.net.ErrorCode error = 1;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListRpcResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:muduo.net.ListRpcResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListRpcResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ListRpcResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:muduo.net.ListRpcResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:muduo.net.ListRpcResponse)
    MergeFrom(*source);
  }
}

void ListRpcResponse::MergeFrom(const ListRpcResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muduo.net.ListRpcResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  service_name_.MergeFrom(from.service_name_);
  method_name_.MergeFrom(from.method_name_);
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void ListRpcResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:muduo.net.ListRpcResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRpcResponse::CopyFrom(const ListRpcResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muduo.net.ListRpcResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRpcResponse::IsInitialized() const {
  return true;
}

void ListRpcResponse::Swap(ListRpcResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListRpcResponse::InternalSwap(ListRpcResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  service_name_.InternalSwap(CastToBase(&other->service_name_));
  method_name_.InternalSwap(CastToBase(&other->method_name_));
  swap(error_, other->error_);
}

::google::protobuf::Metadata ListRpcResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_rpcservice_2eproto);
  return ::file_level_metadata_rpcservice_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetServiceRequest::InitAsDefaultInstance() {
}
class GetServiceRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetServiceRequest::kServiceNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetServiceRequest::GetServiceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muduo.net.GetServiceRequest)
}
GetServiceRequest::GetServiceRequest(const GetServiceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service_name().size() > 0) {
    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  // @@protoc_insertion_point(copy_constructor:muduo.net.GetServiceRequest)
}

void GetServiceRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetServiceRequest_rpcservice_2eproto.base);
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetServiceRequest::~GetServiceRequest() {
  // @@protoc_insertion_point(destructor:muduo.net.GetServiceRequest)
  SharedDtor();
}

void GetServiceRequest::SharedDtor() {
  service_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetServiceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetServiceRequest& GetServiceRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetServiceRequest_rpcservice_2eproto.base);
  return *internal_default_instance();
}


void GetServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:muduo.net.GetServiceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetServiceRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetServiceRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string service_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("muduo.net.GetServiceRequest.service_name");
        object = msg->mutable_service_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetServiceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:muduo.net.GetServiceRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string service_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_name().data(), static_cast<int>(this->service_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "muduo.net.GetServiceRequest.service_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:muduo.net.GetServiceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:muduo.net.GetServiceRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetServiceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:muduo.net.GetServiceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), static_cast<int>(this->service_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muduo.net.GetServiceRequest.service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->service_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:muduo.net.GetServiceRequest)
}

::google::protobuf::uint8* GetServiceRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:muduo.net.GetServiceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), static_cast<int>(this->service_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muduo.net.GetServiceRequest.service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muduo.net.GetServiceRequest)
  return target;
}

size_t GetServiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muduo.net.GetServiceRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServiceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:muduo.net.GetServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServiceRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetServiceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:muduo.net.GetServiceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:muduo.net.GetServiceRequest)
    MergeFrom(*source);
  }
}

void GetServiceRequest::MergeFrom(const GetServiceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muduo.net.GetServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service_name().size() > 0) {

    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
}

void GetServiceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:muduo.net.GetServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceRequest::CopyFrom(const GetServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muduo.net.GetServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceRequest::IsInitialized() const {
  return true;
}

void GetServiceRequest::Swap(GetServiceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetServiceRequest::InternalSwap(GetServiceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  service_name_.Swap(&other->service_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata GetServiceRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_rpcservice_2eproto);
  return ::file_level_metadata_rpcservice_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetServiceResponse::InitAsDefaultInstance() {
}
class GetServiceResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetServiceResponse::kErrorFieldNumber;
const int GetServiceResponse::kProtoFileFieldNumber;
const int GetServiceResponse::kProtoFileNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetServiceResponse::GetServiceResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:muduo.net.GetServiceResponse)
}
GetServiceResponse::GetServiceResponse(const GetServiceResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      proto_file_(from.proto_file_),
      proto_file_name_(from.proto_file_name_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:muduo.net.GetServiceResponse)
}

void GetServiceResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetServiceResponse_rpcservice_2eproto.base);
  error_ = 0;
}

GetServiceResponse::~GetServiceResponse() {
  // @@protoc_insertion_point(destructor:muduo.net.GetServiceResponse)
  SharedDtor();
}

void GetServiceResponse::SharedDtor() {
}

void GetServiceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetServiceResponse& GetServiceResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetServiceResponse_rpcservice_2eproto.base);
  return *internal_default_instance();
}


void GetServiceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:muduo.net.GetServiceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proto_file_.Clear();
  proto_file_name_.Clear();
  error_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetServiceResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetServiceResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .muduo.net.ErrorCode error = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_error(static_cast<::muduo::net::ErrorCode>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated string proto_file = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("muduo.net.GetServiceResponse.proto_file");
          object = msg->add_proto_file();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated string proto_file_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("muduo.net.GetServiceResponse.proto_file_name");
          object = msg->add_proto_file_name();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetServiceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:muduo.net.GetServiceResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .muduo.net.ErrorCode error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_error(static_cast< ::muduo::net::ErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string proto_file = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_proto_file()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->proto_file(this->proto_file_size() - 1).data(),
            static_cast<int>(this->proto_file(this->proto_file_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "muduo.net.GetServiceResponse.proto_file"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string proto_file_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_proto_file_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->proto_file_name(this->proto_file_name_size() - 1).data(),
            static_cast<int>(this->proto_file_name(this->proto_file_name_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "muduo.net.GetServiceResponse.proto_file_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:muduo.net.GetServiceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:muduo.net.GetServiceResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetServiceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:muduo.net.GetServiceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .muduo.net.ErrorCode error = 1;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error(), output);
  }

  // repeated string proto_file = 2;
  for (int i = 0, n = this->proto_file_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proto_file(i).data(), static_cast<int>(this->proto_file(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muduo.net.GetServiceResponse.proto_file");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->proto_file(i), output);
  }

  // repeated string proto_file_name = 3;
  for (int i = 0, n = this->proto_file_name_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proto_file_name(i).data(), static_cast<int>(this->proto_file_name(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muduo.net.GetServiceResponse.proto_file_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->proto_file_name(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:muduo.net.GetServiceResponse)
}

::google::protobuf::uint8* GetServiceResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:muduo.net.GetServiceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .muduo.net.ErrorCode error = 1;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error(), target);
  }

  // repeated string proto_file = 2;
  for (int i = 0, n = this->proto_file_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proto_file(i).data(), static_cast<int>(this->proto_file(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muduo.net.GetServiceResponse.proto_file");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->proto_file(i), target);
  }

  // repeated string proto_file_name = 3;
  for (int i = 0, n = this->proto_file_name_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proto_file_name(i).data(), static_cast<int>(this->proto_file_name(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "muduo.net.GetServiceResponse.proto_file_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->proto_file_name(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muduo.net.GetServiceResponse)
  return target;
}

size_t GetServiceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muduo.net.GetServiceResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string proto_file = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->proto_file_size());
  for (int i = 0, n = this->proto_file_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->proto_file(i));
  }

  // repeated string proto_file_name = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->proto_file_name_size());
  for (int i = 0, n = this->proto_file_name_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->proto_file_name(i));
  }

  // .muduo.net.ErrorCode error = 1;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetServiceResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:muduo.net.GetServiceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServiceResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetServiceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:muduo.net.GetServiceResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:muduo.net.GetServiceResponse)
    MergeFrom(*source);
  }
}

void GetServiceResponse::MergeFrom(const GetServiceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muduo.net.GetServiceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  proto_file_.MergeFrom(from.proto_file_);
  proto_file_name_.MergeFrom(from.proto_file_name_);
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void GetServiceResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:muduo.net.GetServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceResponse::CopyFrom(const GetServiceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muduo.net.GetServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceResponse::IsInitialized() const {
  return true;
}

void GetServiceResponse::Swap(GetServiceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetServiceResponse::InternalSwap(GetServiceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  proto_file_.InternalSwap(CastToBase(&other->proto_file_));
  proto_file_name_.InternalSwap(CastToBase(&other->proto_file_name_));
  swap(error_, other->error_);
}

::google::protobuf::Metadata GetServiceResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_rpcservice_2eproto);
  return ::file_level_metadata_rpcservice_2eproto[kIndexInFileMessages];
}


// ===================================================================

RpcService::~RpcService() {}

const ::google::protobuf::ServiceDescriptor* RpcService::descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_rpcservice_2eproto);
  return file_level_service_descriptors_rpcservice_2eproto[0];
}

const ::google::protobuf::ServiceDescriptor* RpcService::GetDescriptor() {
  return descriptor();
}

void RpcService::listRpc(::google::protobuf::RpcController* controller,
                         const ::muduo::net::ListRpcRequest*,
                         ::muduo::net::ListRpcResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method listRpc() not implemented.");
  done->Run();
}

void RpcService::getService(::google::protobuf::RpcController* controller,
                         const ::muduo::net::GetServiceRequest*,
                         ::muduo::net::GetServiceResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getService() not implemented.");
  done->Run();
}

void RpcService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_rpcservice_2eproto[0]);
  switch(method->index()) {
    case 0:
      listRpc(controller,
             ::google::protobuf::down_cast<const ::muduo::net::ListRpcRequest*>(request),
             ::google::protobuf::down_cast< ::muduo::net::ListRpcResponse*>(response),
             done);
      break;
    case 1:
      getService(controller,
             ::google::protobuf::down_cast<const ::muduo::net::GetServiceRequest*>(request),
             ::google::protobuf::down_cast< ::muduo::net::GetServiceResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& RpcService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::muduo::net::ListRpcRequest::default_instance();
    case 1:
      return ::muduo::net::GetServiceRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& RpcService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::muduo::net::ListRpcResponse::default_instance();
    case 1:
      return ::muduo::net::GetServiceResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

RpcService_Stub::RpcService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
RpcService_Stub::RpcService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
RpcService_Stub::~RpcService_Stub() {
  if (owns_channel_) delete channel_;
}

void RpcService_Stub::listRpc(::google::protobuf::RpcController* controller,
                              const ::muduo::net::ListRpcRequest* request,
                              ::muduo::net::ListRpcResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void RpcService_Stub::getService(::google::protobuf::RpcController* controller,
                              const ::muduo::net::GetServiceRequest* request,
                              ::muduo::net::GetServiceResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace net
}  // namespace muduo
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::muduo::net::ListRpcRequest* Arena::CreateMaybeMessage< ::muduo::net::ListRpcRequest >(Arena* arena) {
  return Arena::CreateInternal< ::muduo::net::ListRpcRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::muduo::net::ListRpcResponse* Arena::CreateMaybeMessage< ::muduo::net::ListRpcResponse >(Arena* arena) {
  return Arena::CreateInternal< ::muduo::net::ListRpcResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::muduo::net::GetServiceRequest* Arena::CreateMaybeMessage< ::muduo::net::GetServiceRequest >(Arena* arena) {
  return Arena::CreateInternal< ::muduo::net::GetServiceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::muduo::net::GetServiceResponse* Arena::CreateMaybeMessage< ::muduo::net::GetServiceResponse >(Arena* arena) {
  return Arena::CreateInternal< ::muduo::net::GetServiceResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
